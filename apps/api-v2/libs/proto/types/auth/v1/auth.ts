// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.20.3
// source: auth/v1/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth.v1";

export interface LoginRequest {
  user: User | undefined;
}

export interface RegisterRequest {
  email: string;
  password: string;
  name: string;
}

export interface AuthResponse {
  accessToken: string;
  refreshToken: string;
  expiresAccessToken: string;
  expiresRefreshToken: string;
  redirect?: boolean | undefined;
  redirectUrl?: string | undefined;
}

export interface User {
  id: number;
  email: string;
  name?: string | undefined;
  password?: string | undefined;
  refreshToken?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface TokenPayload {
  userId: string;
  email: string;
}

export interface VerifyRefreshTokenRequest {
  refreshToken: string;
  email: string;
}

export interface VerifyUserRequest {
  email: string;
  password: string;
}

export interface Empty {}

export const AUTH_V1_PACKAGE_NAME = "auth.v1";

export interface AuthServiceClient {
  login(request: LoginRequest): Observable<AuthResponse>;

  register(request: RegisterRequest): Observable<AuthResponse>;

  refreshToken(request: LoginRequest): Observable<AuthResponse>;

  googleCallback(request: LoginRequest): Observable<AuthResponse>;

  githubCallback(request: LoginRequest): Observable<AuthResponse>;

  verifyRefreshToken(request: VerifyRefreshTokenRequest): Observable<User>;

  verifyUser(request: VerifyUserRequest): Observable<User>;
}

export interface AuthServiceController {
  login(
    request: LoginRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  register(
    request: RegisterRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  refreshToken(
    request: LoginRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  googleCallback(
    request: LoginRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  githubCallback(
    request: LoginRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  verifyRefreshToken(
    request: VerifyRefreshTokenRequest,
  ): Promise<User> | Observable<User> | User;

  verifyUser(
    request: VerifyUserRequest,
  ): Promise<User> | Observable<User> | User;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "login",
      "register",
      "refreshToken",
      "googleCallback",
      "githubCallback",
      "verifyRefreshToken",
      "verifyUser",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod("AuthService", method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod("AuthService", method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
