// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.20.3
// source: analytics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "api.analytics";

export interface User {
  $type: "api.analytics.User";
  id: number;
  email: string;
}

export interface Period {
  $type: "api.analytics.Period";
  year: number;
  month: number;
}

export interface GetPeriodsRequest {
  $type: "api.analytics.GetPeriodsRequest";
  user?: User | undefined;
}

export interface GetPeriodsResponse {
  $type: "api.analytics.GetPeriodsResponse";
  periods: Period[];
}

export interface StatCardsRequest {
  $type: "api.analytics.StatCardsRequest";
  user?: User | undefined;
  month: number;
  year: number;
}

export interface StatCardsResponse {
  $type: "api.analytics.StatCardsResponse";
  workflowExecutions: number;
  creditsConsumed: number;
  phasesExecuted: number;
}

export interface WorkflowStatsRequest {
  $type: "api.analytics.WorkflowStatsRequest";
  user?: User | undefined;
  month: number;
  year: number;
}

export interface DailyStats {
  $type: "api.analytics.DailyStats";
  date: string;
  successful: number;
  failed: number;
}

export interface WorkflowStatsResponse {
  $type: "api.analytics.WorkflowStatsResponse";
  stats: DailyStats[];
}

export interface UsedCreditsRequest {
  $type: "api.analytics.UsedCreditsRequest";
  user?: User | undefined;
  month: number;
  year: number;
}

export interface UsedCreditsResponse {
  $type: "api.analytics.UsedCreditsResponse";
  stats: DailyStats[];
}

export interface DashboardStatsRequest {
  $type: "api.analytics.DashboardStatsRequest";
  user?: User | undefined;
}

export interface DashboardStatsResponse {
  $type: "api.analytics.DashboardStatsResponse";
  currentActiveProjects: number;
  numberOfCreatedComponents: number;
  favoritesComponents: number;
}

export interface FavoritedContentRequest {
  $type: "api.analytics.FavoritedContentRequest";
  user?: User | undefined;
}

export interface FavoritedComponent {
  $type: "api.analytics.FavoritedComponent";
  id: number;
  name: string;
  projectName: string;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface FavoritedContentResponse {
  $type: "api.analytics.FavoritedContentResponse";
  components: FavoritedComponent[];
}

export const API_ANALYTICS_PACKAGE_NAME = "api.analytics";

function createBaseUser(): User {
  return { $type: "api.analytics.User", id: 0, email: "" };
}

export const User: MessageFns<User, "api.analytics.User"> = {
  $type: "api.analytics.User" as const,

  encode(
    message: User,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(User.$type, User);

function createBasePeriod(): Period {
  return { $type: "api.analytics.Period", year: 0, month: 0 };
}

export const Period: MessageFns<Period, "api.analytics.Period"> = {
  $type: "api.analytics.Period" as const,

  encode(
    message: Period,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.year !== 0) {
      writer.uint32(8).int32(message.year);
    }
    if (message.month !== 0) {
      writer.uint32(16).int32(message.month);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Period {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePeriod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.year = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.month = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(Period.$type, Period);

function createBaseGetPeriodsRequest(): GetPeriodsRequest {
  return { $type: "api.analytics.GetPeriodsRequest" };
}

export const GetPeriodsRequest: MessageFns<
  GetPeriodsRequest,
  "api.analytics.GetPeriodsRequest"
> = {
  $type: "api.analytics.GetPeriodsRequest" as const,

  encode(
    message: GetPeriodsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPeriodsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPeriodsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(GetPeriodsRequest.$type, GetPeriodsRequest);

function createBaseGetPeriodsResponse(): GetPeriodsResponse {
  return { $type: "api.analytics.GetPeriodsResponse", periods: [] };
}

export const GetPeriodsResponse: MessageFns<
  GetPeriodsResponse,
  "api.analytics.GetPeriodsResponse"
> = {
  $type: "api.analytics.GetPeriodsResponse" as const,

  encode(
    message: GetPeriodsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.periods) {
      Period.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetPeriodsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPeriodsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.periods.push(Period.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(GetPeriodsResponse.$type, GetPeriodsResponse);

function createBaseStatCardsRequest(): StatCardsRequest {
  return { $type: "api.analytics.StatCardsRequest", month: 0, year: 0 };
}

export const StatCardsRequest: MessageFns<
  StatCardsRequest,
  "api.analytics.StatCardsRequest"
> = {
  $type: "api.analytics.StatCardsRequest" as const,

  encode(
    message: StatCardsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.month !== 0) {
      writer.uint32(16).int32(message.month);
    }
    if (message.year !== 0) {
      writer.uint32(24).int32(message.year);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatCardsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatCardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.month = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.year = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(StatCardsRequest.$type, StatCardsRequest);

function createBaseStatCardsResponse(): StatCardsResponse {
  return {
    $type: "api.analytics.StatCardsResponse",
    workflowExecutions: 0,
    creditsConsumed: 0,
    phasesExecuted: 0,
  };
}

export const StatCardsResponse: MessageFns<
  StatCardsResponse,
  "api.analytics.StatCardsResponse"
> = {
  $type: "api.analytics.StatCardsResponse" as const,

  encode(
    message: StatCardsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.workflowExecutions !== 0) {
      writer.uint32(8).int32(message.workflowExecutions);
    }
    if (message.creditsConsumed !== 0) {
      writer.uint32(17).double(message.creditsConsumed);
    }
    if (message.phasesExecuted !== 0) {
      writer.uint32(24).int32(message.phasesExecuted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatCardsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatCardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.workflowExecutions = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.creditsConsumed = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.phasesExecuted = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(StatCardsResponse.$type, StatCardsResponse);

function createBaseWorkflowStatsRequest(): WorkflowStatsRequest {
  return { $type: "api.analytics.WorkflowStatsRequest", month: 0, year: 0 };
}

export const WorkflowStatsRequest: MessageFns<
  WorkflowStatsRequest,
  "api.analytics.WorkflowStatsRequest"
> = {
  $type: "api.analytics.WorkflowStatsRequest" as const,

  encode(
    message: WorkflowStatsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.month !== 0) {
      writer.uint32(16).int32(message.month);
    }
    if (message.year !== 0) {
      writer.uint32(24).int32(message.year);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WorkflowStatsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflowStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.month = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.year = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(WorkflowStatsRequest.$type, WorkflowStatsRequest);

function createBaseDailyStats(): DailyStats {
  return {
    $type: "api.analytics.DailyStats",
    date: "",
    successful: 0,
    failed: 0,
  };
}

export const DailyStats: MessageFns<DailyStats, "api.analytics.DailyStats"> = {
  $type: "api.analytics.DailyStats" as const,

  encode(
    message: DailyStats,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    if (message.successful !== 0) {
      writer.uint32(16).int32(message.successful);
    }
    if (message.failed !== 0) {
      writer.uint32(24).int32(message.failed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DailyStats {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDailyStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.successful = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.failed = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(DailyStats.$type, DailyStats);

function createBaseWorkflowStatsResponse(): WorkflowStatsResponse {
  return { $type: "api.analytics.WorkflowStatsResponse", stats: [] };
}

export const WorkflowStatsResponse: MessageFns<
  WorkflowStatsResponse,
  "api.analytics.WorkflowStatsResponse"
> = {
  $type: "api.analytics.WorkflowStatsResponse" as const,

  encode(
    message: WorkflowStatsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.stats) {
      DailyStats.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WorkflowStatsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflowStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stats.push(DailyStats.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(WorkflowStatsResponse.$type, WorkflowStatsResponse);

function createBaseUsedCreditsRequest(): UsedCreditsRequest {
  return { $type: "api.analytics.UsedCreditsRequest", month: 0, year: 0 };
}

export const UsedCreditsRequest: MessageFns<
  UsedCreditsRequest,
  "api.analytics.UsedCreditsRequest"
> = {
  $type: "api.analytics.UsedCreditsRequest" as const,

  encode(
    message: UsedCreditsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.month !== 0) {
      writer.uint32(16).int32(message.month);
    }
    if (message.year !== 0) {
      writer.uint32(24).int32(message.year);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UsedCreditsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsedCreditsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.month = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.year = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(UsedCreditsRequest.$type, UsedCreditsRequest);

function createBaseUsedCreditsResponse(): UsedCreditsResponse {
  return { $type: "api.analytics.UsedCreditsResponse", stats: [] };
}

export const UsedCreditsResponse: MessageFns<
  UsedCreditsResponse,
  "api.analytics.UsedCreditsResponse"
> = {
  $type: "api.analytics.UsedCreditsResponse" as const,

  encode(
    message: UsedCreditsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.stats) {
      DailyStats.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UsedCreditsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsedCreditsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stats.push(DailyStats.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(UsedCreditsResponse.$type, UsedCreditsResponse);

function createBaseDashboardStatsRequest(): DashboardStatsRequest {
  return { $type: "api.analytics.DashboardStatsRequest" };
}

export const DashboardStatsRequest: MessageFns<
  DashboardStatsRequest,
  "api.analytics.DashboardStatsRequest"
> = {
  $type: "api.analytics.DashboardStatsRequest" as const,

  encode(
    message: DashboardStatsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DashboardStatsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboardStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(DashboardStatsRequest.$type, DashboardStatsRequest);

function createBaseDashboardStatsResponse(): DashboardStatsResponse {
  return {
    $type: "api.analytics.DashboardStatsResponse",
    currentActiveProjects: 0,
    numberOfCreatedComponents: 0,
    favoritesComponents: 0,
  };
}

export const DashboardStatsResponse: MessageFns<
  DashboardStatsResponse,
  "api.analytics.DashboardStatsResponse"
> = {
  $type: "api.analytics.DashboardStatsResponse" as const,

  encode(
    message: DashboardStatsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.currentActiveProjects !== 0) {
      writer.uint32(8).int32(message.currentActiveProjects);
    }
    if (message.numberOfCreatedComponents !== 0) {
      writer.uint32(16).int32(message.numberOfCreatedComponents);
    }
    if (message.favoritesComponents !== 0) {
      writer.uint32(24).int32(message.favoritesComponents);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DashboardStatsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboardStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.currentActiveProjects = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.numberOfCreatedComponents = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.favoritesComponents = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(DashboardStatsResponse.$type, DashboardStatsResponse);

function createBaseFavoritedContentRequest(): FavoritedContentRequest {
  return { $type: "api.analytics.FavoritedContentRequest" };
}

export const FavoritedContentRequest: MessageFns<
  FavoritedContentRequest,
  "api.analytics.FavoritedContentRequest"
> = {
  $type: "api.analytics.FavoritedContentRequest" as const,

  encode(
    message: FavoritedContentRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): FavoritedContentRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFavoritedContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(FavoritedContentRequest.$type, FavoritedContentRequest);

function createBaseFavoritedComponent(): FavoritedComponent {
  return {
    $type: "api.analytics.FavoritedComponent",
    id: 0,
    name: "",
    projectName: "",
  };
}

export const FavoritedComponent: MessageFns<
  FavoritedComponent,
  "api.analytics.FavoritedComponent"
> = {
  $type: "api.analytics.FavoritedComponent" as const,

  encode(
    message: FavoritedComponent,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.projectName !== "") {
      writer.uint32(26).string(message.projectName);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): FavoritedComponent {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFavoritedComponent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.projectName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(FavoritedComponent.$type, FavoritedComponent);

function createBaseFavoritedContentResponse(): FavoritedContentResponse {
  return { $type: "api.analytics.FavoritedContentResponse", components: [] };
}

export const FavoritedContentResponse: MessageFns<
  FavoritedContentResponse,
  "api.analytics.FavoritedContentResponse"
> = {
  $type: "api.analytics.FavoritedContentResponse" as const,

  encode(
    message: FavoritedContentResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.components) {
      FavoritedComponent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): FavoritedContentResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFavoritedContentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.components.push(
            FavoritedComponent.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(
  FavoritedContentResponse.$type,
  FavoritedContentResponse,
);

export interface AnalyticsServiceClient {
  getPeriods(request: GetPeriodsRequest): Observable<GetPeriodsResponse>;

  getStatCardsValues(request: StatCardsRequest): Observable<StatCardsResponse>;

  getWorkflowExecutionStats(
    request: WorkflowStatsRequest,
  ): Observable<WorkflowStatsResponse>;

  getUsedCreditsInPeriod(
    request: UsedCreditsRequest,
  ): Observable<UsedCreditsResponse>;

  getDashboardStatCardsValues(
    request: DashboardStatsRequest,
  ): Observable<DashboardStatsResponse>;

  getFavoritedTableContent(
    request: FavoritedContentRequest,
  ): Observable<FavoritedContentResponse>;
}

export interface AnalyticsServiceController {
  getPeriods(
    request: GetPeriodsRequest,
  ):
    | Promise<GetPeriodsResponse>
    | Observable<GetPeriodsResponse>
    | GetPeriodsResponse;

  getStatCardsValues(
    request: StatCardsRequest,
  ):
    | Promise<StatCardsResponse>
    | Observable<StatCardsResponse>
    | StatCardsResponse;

  getWorkflowExecutionStats(
    request: WorkflowStatsRequest,
  ):
    | Promise<WorkflowStatsResponse>
    | Observable<WorkflowStatsResponse>
    | WorkflowStatsResponse;

  getUsedCreditsInPeriod(
    request: UsedCreditsRequest,
  ):
    | Promise<UsedCreditsResponse>
    | Observable<UsedCreditsResponse>
    | UsedCreditsResponse;

  getDashboardStatCardsValues(
    request: DashboardStatsRequest,
  ):
    | Promise<DashboardStatsResponse>
    | Observable<DashboardStatsResponse>
    | DashboardStatsResponse;

  getFavoritedTableContent(
    request: FavoritedContentRequest,
  ):
    | Promise<FavoritedContentResponse>
    | Observable<FavoritedContentResponse>
    | FavoritedContentResponse;
}

export function AnalyticsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getPeriods",
      "getStatCardsValues",
      "getWorkflowExecutionStats",
      "getUsedCreditsInPeriod",
      "getDashboardStatCardsValues",
      "getFavoritedTableContent",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod("AnalyticsService", method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod("AnalyticsService", method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ANALYTICS_SERVICE_NAME = "AnalyticsService";

export interface MessageFns<T, V extends string> {
  readonly $type: V;

  encode(message: T, writer?: BinaryWriter): BinaryWriter;

  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
