// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: components.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "api.components";

export enum CodeType {
  CODE = 0,
  TYPESCRIPT_DOCS = 1,
  UNIT_TESTS = 2,
  E2E_TESTS = 3,
  MDX_DOCS = 4,
  UNRECOGNIZED = -1,
}

export interface User {
  $type: "api.components.User";
  id: number;
  email: string;
}

export interface Component {
  $type: "api.components.Component";
  id: number;
  title: string;
  code: string;
  e2eTests: string;
  unitTests: string;
  mdxDocs: string;
  tsDocs: string;
  projectId: number;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
  projectName: string;
  userId: number;
  wasE2eTested: boolean;
  wasUnitTested: boolean;
  hasMdxDocs: boolean;
  hasTypescriptDocs: boolean;
  isFavorite: boolean;
}

export interface GetComponentRequest {
  $type: "api.components.GetComponentRequest";
  user?: User | undefined;
  projectId: number;
  componentId: number;
}

export interface SaveComponentRequest {
  $type: "api.components.SaveComponentRequest";
  user?: User | undefined;
  title: string;
  code: string;
  projectId: number;
}

export interface FavoriteComponentRequest {
  $type: "api.components.FavoriteComponentRequest";
  user?: User | undefined;
  projectId: number;
  componentId: number;
  favoriteValue: boolean;
}

export interface GenerateRequest {
  $type: "api.components.GenerateRequest";
  prompt: string;
}

export interface GenerateResponse {
  $type: "api.components.GenerateResponse";
  content: string;
}

export interface UpdateCodeRequest {
  $type: "api.components.UpdateCodeRequest";
  user?: User | undefined;
  componentId: number;
  codeType: CodeType;
  content: string;
}

export interface GenerateCodeRequest {
  $type: "api.components.GenerateCodeRequest";
  user?: User | undefined;
  componentId: number;
  codeType: CodeType;
}

export const API_COMPONENTS_PACKAGE_NAME = "api.components";

function createBaseUser(): User {
  return { $type: "api.components.User", id: 0, email: "" };
}

export const User: MessageFns<User, "api.components.User"> = {
  $type: "api.components.User" as const,

  encode(
    message: User,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(User.$type, User);

function createBaseComponent(): Component {
  return {
    $type: "api.components.Component",
    id: 0,
    title: "",
    code: "",
    e2eTests: "",
    unitTests: "",
    mdxDocs: "",
    tsDocs: "",
    projectId: 0,
    projectName: "",
    userId: 0,
    wasE2eTested: false,
    wasUnitTested: false,
    hasMdxDocs: false,
    hasTypescriptDocs: false,
    isFavorite: false,
  };
}

export const Component: MessageFns<Component, "api.components.Component"> = {
  $type: "api.components.Component" as const,

  encode(
    message: Component,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.code !== "") {
      writer.uint32(26).string(message.code);
    }
    if (message.e2eTests !== "") {
      writer.uint32(34).string(message.e2eTests);
    }
    if (message.unitTests !== "") {
      writer.uint32(42).string(message.unitTests);
    }
    if (message.mdxDocs !== "") {
      writer.uint32(50).string(message.mdxDocs);
    }
    if (message.tsDocs !== "") {
      writer.uint32(58).string(message.tsDocs);
    }
    if (message.projectId !== 0) {
      writer.uint32(64).int32(message.projectId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(74).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(82).fork()).join();
    }
    if (message.projectName !== "") {
      writer.uint32(90).string(message.projectName);
    }
    if (message.userId !== 0) {
      writer.uint32(96).int32(message.userId);
    }
    if (message.wasE2eTested !== false) {
      writer.uint32(104).bool(message.wasE2eTested);
    }
    if (message.wasUnitTested !== false) {
      writer.uint32(112).bool(message.wasUnitTested);
    }
    if (message.hasMdxDocs !== false) {
      writer.uint32(120).bool(message.hasMdxDocs);
    }
    if (message.hasTypescriptDocs !== false) {
      writer.uint32(128).bool(message.hasTypescriptDocs);
    }
    if (message.isFavorite !== false) {
      writer.uint32(136).bool(message.isFavorite);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Component {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.e2eTests = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.unitTests = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.mdxDocs = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tsDocs = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.projectId = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.projectName = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.wasE2eTested = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.wasUnitTested = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.hasMdxDocs = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.hasTypescriptDocs = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.isFavorite = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(Component.$type, Component);

function createBaseGetComponentRequest(): GetComponentRequest {
  return {
    $type: "api.components.GetComponentRequest",
    projectId: 0,
    componentId: 0,
  };
}

export const GetComponentRequest: MessageFns<
  GetComponentRequest,
  "api.components.GetComponentRequest"
> = {
  $type: "api.components.GetComponentRequest" as const,

  encode(
    message: GetComponentRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.projectId !== 0) {
      writer.uint32(16).int32(message.projectId);
    }
    if (message.componentId !== 0) {
      writer.uint32(24).int32(message.componentId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetComponentRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetComponentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.projectId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.componentId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(GetComponentRequest.$type, GetComponentRequest);

function createBaseSaveComponentRequest(): SaveComponentRequest {
  return {
    $type: "api.components.SaveComponentRequest",
    title: "",
    code: "",
    projectId: 0,
  };
}

export const SaveComponentRequest: MessageFns<
  SaveComponentRequest,
  "api.components.SaveComponentRequest"
> = {
  $type: "api.components.SaveComponentRequest" as const,

  encode(
    message: SaveComponentRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.code !== "") {
      writer.uint32(26).string(message.code);
    }
    if (message.projectId !== 0) {
      writer.uint32(32).int32(message.projectId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SaveComponentRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveComponentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.projectId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(SaveComponentRequest.$type, SaveComponentRequest);

function createBaseFavoriteComponentRequest(): FavoriteComponentRequest {
  return {
    $type: "api.components.FavoriteComponentRequest",
    projectId: 0,
    componentId: 0,
    favoriteValue: false,
  };
}

export const FavoriteComponentRequest: MessageFns<
  FavoriteComponentRequest,
  "api.components.FavoriteComponentRequest"
> = {
  $type: "api.components.FavoriteComponentRequest" as const,

  encode(
    message: FavoriteComponentRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.projectId !== 0) {
      writer.uint32(16).int32(message.projectId);
    }
    if (message.componentId !== 0) {
      writer.uint32(24).int32(message.componentId);
    }
    if (message.favoriteValue !== false) {
      writer.uint32(32).bool(message.favoriteValue);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): FavoriteComponentRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFavoriteComponentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.projectId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.componentId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.favoriteValue = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(
  FavoriteComponentRequest.$type,
  FavoriteComponentRequest,
);

function createBaseGenerateRequest(): GenerateRequest {
  return { $type: "api.components.GenerateRequest", prompt: "" };
}

export const GenerateRequest: MessageFns<
  GenerateRequest,
  "api.components.GenerateRequest"
> = {
  $type: "api.components.GenerateRequest" as const,

  encode(
    message: GenerateRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.prompt !== "") {
      writer.uint32(10).string(message.prompt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prompt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(GenerateRequest.$type, GenerateRequest);

function createBaseGenerateResponse(): GenerateResponse {
  return { $type: "api.components.GenerateResponse", content: "" };
}

export const GenerateResponse: MessageFns<
  GenerateResponse,
  "api.components.GenerateResponse"
> = {
  $type: "api.components.GenerateResponse" as const,

  encode(
    message: GenerateResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.content !== "") {
      writer.uint32(10).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(GenerateResponse.$type, GenerateResponse);

function createBaseUpdateCodeRequest(): UpdateCodeRequest {
  return {
    $type: "api.components.UpdateCodeRequest",
    componentId: 0,
    codeType: 0,
    content: "",
  };
}

export const UpdateCodeRequest: MessageFns<
  UpdateCodeRequest,
  "api.components.UpdateCodeRequest"
> = {
  $type: "api.components.UpdateCodeRequest" as const,

  encode(
    message: UpdateCodeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.componentId !== 0) {
      writer.uint32(16).int32(message.componentId);
    }
    if (message.codeType !== 0) {
      writer.uint32(24).int32(message.codeType);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCodeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCodeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.componentId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.codeType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(UpdateCodeRequest.$type, UpdateCodeRequest);

function createBaseGenerateCodeRequest(): GenerateCodeRequest {
  return {
    $type: "api.components.GenerateCodeRequest",
    componentId: 0,
    codeType: 0,
  };
}

export const GenerateCodeRequest: MessageFns<
  GenerateCodeRequest,
  "api.components.GenerateCodeRequest"
> = {
  $type: "api.components.GenerateCodeRequest" as const,

  encode(
    message: GenerateCodeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.componentId !== 0) {
      writer.uint32(16).int32(message.componentId);
    }
    if (message.codeType !== 0) {
      writer.uint32(24).int32(message.codeType);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GenerateCodeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateCodeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.componentId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.codeType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

messageTypeRegistry.set(GenerateCodeRequest.$type, GenerateCodeRequest);

export interface ComponentsServiceClient {
  /** Get single component */

  getComponent(request: GetComponentRequest): Observable<Component>;

  /** Save component */

  saveComponent(request: SaveComponentRequest): Observable<Component>;

  /** Favorite component */

  favoriteComponent(request: FavoriteComponentRequest): Observable<Component>;

  /** Generate component stream */

  generateComponentStream(
    request: GenerateRequest,
  ): Observable<GenerateResponse>;

  /** Update component code */

  updateComponentCode(request: UpdateCodeRequest): Observable<Component>;

  /** Generate code */

  generateCode(request: GenerateCodeRequest): Observable<Component>;
}

export interface ComponentsServiceController {
  /** Get single component */

  getComponent(
    request: GetComponentRequest,
  ): Promise<Component> | Observable<Component> | Component;

  /** Save component */

  saveComponent(
    request: SaveComponentRequest,
  ): Promise<Component> | Observable<Component> | Component;

  /** Favorite component */

  favoriteComponent(
    request: FavoriteComponentRequest,
  ): Promise<Component> | Observable<Component> | Component;

  /** Generate component stream */

  generateComponentStream(
    request: GenerateRequest,
  ): Observable<GenerateResponse>;

  /** Update component code */

  updateComponentCode(
    request: UpdateCodeRequest,
  ): Promise<Component> | Observable<Component> | Component;

  /** Generate code */

  generateCode(
    request: GenerateCodeRequest,
  ): Promise<Component> | Observable<Component> | Component;
}

export function ComponentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getComponent",
      "saveComponent",
      "favoriteComponent",
      "generateComponentStream",
      "updateComponentCode",
      "generateCode",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod("ComponentsService", method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod("ComponentsService", method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const COMPONENTS_SERVICE_NAME = "ComponentsService";

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
