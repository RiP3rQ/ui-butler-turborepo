syntax = "proto3";

package api.workflows;

import "google/protobuf/timestamp.proto";

service WorkflowsService {
    rpc GetAllUserWorkflows (GetAllUserWorkflowsRequest) returns (WorkflowsResponse) {}
    rpc GetWorkflowById (GetWorkflowByIdRequest) returns (WorkflowResponse) {}
    rpc CreateWorkflow (CreateWorkflowRequest) returns (WorkflowResponse) {}
    rpc DeleteWorkflow (DeleteWorkflowRequest) returns (WorkflowResponse) {}
    rpc DuplicateWorkflow (DuplicateWorkflowRequest) returns (WorkflowResponse) {}
    rpc PublishWorkflow (PublishWorkflowRequest) returns (WorkflowResponse) {}
    rpc UnpublishWorkflow (UnpublishWorkflowRequest) returns (WorkflowResponse) {}
    rpc RunWorkflow (RunWorkflowRequest) returns (RunWorkflowResponse) {}
    rpc UpdateWorkflow (UpdateWorkflowRequest) returns (WorkflowResponse) {}
    rpc GetHistoricWorkflowExecutions (GetHistoricRequest) returns (WorkflowExecutionsResponse) {}
    rpc GetWorkflowExecutions (GetExecutionsRequest) returns (WorkflowExecutionDetailResponse) {}
    rpc GetWorkflowPhase (GetPhaseRequest) returns (PhaseResponse) {}
}

message User {
    string id = 1;
    string email = 2;
}

message Workflow {
    int32 id = 1;
    string name = 2;
    string description = 3;
    int32 userId = 4;
    string definition = 5;
    string status = 6;
    string executionPlan = 7;
    int32 creditsCost = 8;
    google.protobuf.Timestamp createdAt = 9;
    google.protobuf.Timestamp updatedAt = 10;
    optional google.protobuf.Timestamp lastRunAt = 11;
    optional string lastRunId = 12;
    optional string lastRunStatus = 13;
    optional google.protobuf.Timestamp nextRunAt = 14;
}

message WorkflowExecution {
    int32 id = 1;
    int32 workflowId = 2;
    int32 userId = 3;
    string status = 4;
    optional google.protobuf.Timestamp startedAt = 5;
    optional google.protobuf.Timestamp completedAt = 6;
    optional string trigger = 7;
    string definition = 8;
    optional google.protobuf.Timestamp createdAt = 9;
    optional int32 creditsConsumed = 10;
}

message ExecutionPhase {
    int32 id = 1;
    int32 workflowExecutionId = 2;
    int32 userId = 3;
    string status = 4;
    int32 number = 5;
    optional string node = 6;
    string name = 7;
    optional int32 creditsCost = 8;
    optional string inputs = 9;
    optional string outputs = 10;
    optional google.protobuf.Timestamp startedAt = 11;
    optional google.protobuf.Timestamp completedAt = 12;
}

message ExecutionLog {
    int32 id = 1;
    int32 executionPhaseId = 2;
    string message = 3;
    string logLevel = 4;
    google.protobuf.Timestamp timestamp = 5;
}

// Request messages
message GetAllUserWorkflowsRequest {
    User user = 1;
}

message GetWorkflowByIdRequest {
    User user = 1;
    int32 workflowId = 2;
}

message CreateWorkflowRequest {
    User user = 1;
    string name = 2;
    string description = 3;
}

message DeleteWorkflowRequest {
    User user = 1;
    int32 workflowId = 2;
}

message DuplicateWorkflowRequest {
    User user = 1;
    int32 workflowId = 2;
    string name = 3;
    string description = 4;
}

message PublishWorkflowRequest {
    User user = 1;
    int32 workflowId = 2;
    string flowDefinition = 3;
}

message UnpublishWorkflowRequest {
    User user = 1;
    int32 workflowId = 2;
}

message RunWorkflowRequest {
    User user = 1;
    int32 workflowId = 2;
    string flowDefinition = 3;
    string componentId = 4;
}

message UpdateWorkflowRequest {
    User user = 1;
    int32 workflowId = 2;
    string definition = 3;
}

message GetHistoricRequest {
    User user = 1;
    int32 workflowId = 2;
}

message GetExecutionsRequest {
    User user = 1;
    int32 executionId = 2;
}

message GetPhaseRequest {
    User user = 1;
    int32 phaseId = 2;
}

// Response messages
message WorkflowsResponse {
    repeated Workflow workflows = 1;
}

message WorkflowResponse {
    Workflow workflow = 1;
}

message RunWorkflowResponse {
    string url = 1;
}

message WorkflowExecutionsResponse {
    repeated WorkflowExecution executions = 1;
}

message WorkflowExecutionDetailResponse {
    WorkflowExecution execution = 1;
    repeated ExecutionPhase phases = 2;
}

message PhaseResponse {
    ExecutionPhase phase = 1;
    repeated ExecutionLog logs = 2;
}